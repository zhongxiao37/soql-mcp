name: SLSA Go Releaser

on:
  push:
    tags:
      - "v*" # 当推送以 'v' 开头的标签时触发，如 v1.0.0
  workflow_dispatch: # 允许手动触发

permissions: read-all

jobs:
  # 生成 ldflags，用于构建信息注入
  args:
    runs-on: ubuntu-latest
    outputs:
      ldflags: ${{ steps.ldflags.outputs.value }}
    steps:
      - id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: ldflags
        run: |
          echo "value=-X main.version=${{ github.ref_name }} -X main.commit=${{ github.sha }}" >> "$GITHUB_OUTPUT"

  # 使用 SLSA Go releaser 构建二进制文件
  build:
    permissions:
      id-token: write # 用于签名
      contents: write # 用于上传到 release
      actions: read # 用于下载构件
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v2.0.0
    with:
      go-version: "1.23"
      # 可选：配置构建的架构和操作系统
      config-file: .slsa-goreleaser.yml
      evaluated-envs: "VERSION:${{github.ref_name}},COMMIT:${{github.sha}}"
    secrets: inherit

  # 可选：额外的验证步骤
  verify:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ always() && needs.build.result == 'success' }}
    steps:
      - uses: actions/checkout@v4

      - name: Download assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          gh release download "$GITHUB_REF_NAME" -R "$GITHUB_REPOSITORY"

      - name: Verify assets
        env:
          CHECKSUMS: ${{ needs.build.outputs.go-binary-name }}.intoto.jsonl
        run: |
          set -euo pipefail
          echo "Verifying SLSA provenance..."
          # 这里可以添加额外的验证逻辑
          ls -la
